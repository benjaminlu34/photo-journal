"use client";

import React, { useRef, useState, useCallback } from "react";
import { useNoteContext }   from "@/components/board/NoteContext";
import { snapToGrid }       from "@/utils/snapToGrid";
import clsx                 from "clsx";
import { GripHorizontal }   from "lucide-react";
import "@/styles/pinboard.css"; // for any shared vars

/*───────────────────────────────────────────────────────────
  Types
───────────────────────────────────────────────────────────*/
export interface StickyNoteShellProps {
  data: {
    id: string;
    position: {
      x: number;
      y: number;
      width: number;
      height: number;
      rotation: number;
    };
  };
  children: React.ReactNode;
}

/*───────────────────────────────────────────────────────────
  Component
───────────────────────────────────────────────────────────*/
export const StickyNoteShell: React.FC<StickyNoteShellProps> = ({
  data,
  children,
}) => {
  /* ------- context ------- */
  const { selectedId, select, updateNote, gridSnap } = useNoteContext();
  const isSelected = selectedId === data.id;

  /* ------- refs / state ------- */
  const shellRef   = useRef<HTMLDivElement>(null);
  const dragStart  = useRef<{ dx: number; dy: number }>({ dx: 0, dy: 0 });
  const livePos    = useRef({ x: data.position.x, y: data.position.y });
  const rafId      = useRef(0);

  /* ------- helpers ------- */
  const applyTransform = (x: number, y: number) => {
    if (shellRef.current) {
      shellRef.current.style.transform = `translate3d(${x}px,${y}px,0) rotate(${data.position.rotation}deg)`;
    }
  };

  /* ------- drag logic ------- */
  const onPointerDown = useCallback(
    (e: React.PointerEvent) => {
      // only start drag if hitting the grip bar
      if (!(e.target as HTMLElement).closest("[data-grip]")) return;

      e.preventDefault();
      e.stopPropagation();

      // board offset
      const board = (shellRef.current?.offsetParent as HTMLElement) ?? document.body;
      const boardRect = board.getBoundingClientRect();

      dragStart.current = {
        dx: e.clientX - boardRect.left - data.position.x,
        dy: e.clientY - boardRect.top  - data.position.y,
      };

      // capture pointer first so we never miss the first move
      (e.currentTarget as HTMLElement).setPointerCapture(e.pointerId);
      select(data.id);

      const handleMove = (ev: PointerEvent) => {
        const boardRectMove = board.getBoundingClientRect();
        let newX = ev.clientX - boardRectMove.left - dragStart.current.dx;
        let newY = ev.clientY - boardRectMove.top  - dragStart.current.dy;

        if (gridSnap) {
          newX = snapToGrid(newX);
          newY = snapToGrid(newY);
        }
        livePos.current = { x: newX, y: newY };

        if (!rafId.current) {
          rafId.current = requestAnimationFrame(() => {
            applyTransform(livePos.current.x, livePos.current.y);
            rafId.current = 0;
          });
        }
      };

      const handleUp = () => {
        document.removeEventListener("pointermove", handleMove);
        document.removeEventListener("pointerup", handleUp);
        updateNote(data.id, {
          position: { ...data.position, ...livePos.current },
        });
      };

      document.addEventListener("pointermove", handleMove, { passive: false });
      document.addEventListener("pointerup",   handleUp);
    },
    [data, gridSnap, select, updateNote]
  );

  /*───────────────────────────────────────────────────────────*/

  return (
    <article
      ref={shellRef}
      role="group"
      tabIndex={0}
      aria-roledescription="sticky note"
      className={clsx(
        "absolute select-none rounded-[var(--radius-lg)] shadow-neu overflow-hidden",
        "transition-shadow will-change-transform",
        isSelected && "ring-2 ring-primary/50"
      )}
      style={{
        width:  data.position.width,
        height: data.position.height,
        transform: `translate3d(${data.position.x}px,${data.position.y}px,0) rotate(${data.position.rotation}deg)`,
      }}
      onPointerDown={onPointerDown}
    >
      {/* Grip bar */}
      <div
        data-grip
        className={clsx(
          "h-8 w-full bg-gradient-to-r from-primary/10 to-secondary/10",
          "cursor-grab active:cursor-grabbing flex items-center justify-center",
          "border-b border-primary/10"
        )}
      >
        <GripHorizontal className="w-4 h-4 text-muted-foreground pointer-events-none" />
      </div>

      {/* Content slot */}
      <div className="p-4 h-[calc(100%-2rem)] overflow-hidden">{children}</div>
    </article>
  );
};

export default StickyNoteShell;
