"use client";

import { useState, useEffect, useMemo, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import AppLayout from "@/components/layouts/app-layout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Calendar } from "@/components/ui/calendar";
import { Progress } from "@/components/ui/progress";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import {
  Plus,
  Search,
  Filter,
  Edit,
  Trash2,
  Calendar as CalendarIcon,
  TrendingUp,
  Heart,
  Lightbulb,
  Target,
  CheckSquare,
  MessageSquare,
  MoreVertical,
  Star,
  ArrowUp,
  ArrowDown,
  Download,
  Upload,
  BarChart3,
  Smile,
  Battery
} from "lucide-react";

interface JournalEntry {
  id: string;
  title: string;
  content: string;
  category: 'reflection' | 'goal' | 'gratitude' | 'idea' | 'task';
  priority: 'low' | 'medium' | 'high';  
  tags: string[];
  mood?: number;
  energy?: number;
  completed?: boolean;
  createdAt: Date;
  updatedAt: Date;
}

interface DayData {
  date: string;
  entries: JournalEntry[];
  mood: number;
  energy: number;
  summary?: string;
}

const categoryColors = {
  reflection: 'bg-violet-500/20 text-violet-300 border-violet-500/30',
  goal: 'bg-blue-500/20 text-blue-300 border-blue-500/30',
  gratitude: 'bg-pink-500/20 text-pink-300 border-pink-500/30',
  idea: 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30',
  task: 'bg-green-500/20 text-green-300 border-green-500/30'
};

const categoryIcons = {
  reflection: MessageSquare,
  goal: Target,
  gratitude: Heart,
  idea: Lightbulb,
  task: CheckSquare
};

const priorityColors = {
  low: 'text-green-400',
  medium: 'text-yellow-400',
  high: 'text-red-400'
};

export default function FlowJournal() {
  const [entries, setEntries] = useState<JournalEntry[]>([]);
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [activeView, setActiveView] = useState<'daily' | 'weekly' | 'monthly'>('daily');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState<string>('all');
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [editingEntry, setEditingEntry] = useState<JournalEntry | null>(null);
  const [newEntry, setNewEntry] = useState<Partial<JournalEntry>>({
    title: '',
    content: '',
    category: 'reflection',
    priority: 'medium',
    tags: [],
    mood: 5,
    energy: 5
  });

  // Load data from localStorage
  useEffect(() => {
    const savedEntries = localStorage.getItem('flowjournal-entries');
    if (savedEntries) {
      const parsed = JSON.parse(savedEntries);
      const withDates = parsed.map((entry: any) => ({
        ...entry,
        createdAt: new Date(entry.createdAt),
        updatedAt: new Date(entry.updatedAt)
      }));
      setEntries(withDates);
    }
  }, []);

  // Save to localStorage whenever entries change
  useEffect(() => {
    localStorage.setItem('flowjournal-entries', JSON.stringify(entries));
  }, [entries]);

  const createEntry = useCallback(() => {
    if (!newEntry.title || !newEntry.content) return;

    const entry: JournalEntry = {
      id: `entry_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      title: newEntry.title,
      content: newEntry.content,
      category: newEntry.category as JournalEntry['category'],
      priority: newEntry.priority as JournalEntry['priority'],
      tags: newEntry.tags || [],
      mood: newEntry.mood,
      energy: newEntry.energy,
      completed: newEntry.category === 'task' ? false : undefined,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    setEntries(prev => [entry, ...prev]);
    setNewEntry({
      title: '',
      content: '',
      category: 'reflection',
      priority: 'medium',
      tags: [],
      mood: 5,
      energy: 5
    });
    setIsCreateDialogOpen(false);
  }, [newEntry]);

  const updateEntry = useCallback((updatedEntry: JournalEntry) => {
    setEntries(prev => prev.map(entry => 
      entry.id === updatedEntry.id 
        ? { ...updatedEntry, updatedAt: new Date() }
        : entry
    ));
    setEditingEntry(null);
  }, []);

  const deleteEntry = useCallback((id: string) => {
    setEntries(prev => prev.filter(entry => entry.id !== id));
  }, []);

  const toggleTaskComplete = useCallback((id: string) => {
    setEntries(prev => prev.map(entry => 
      entry.id === id 
        ? { ...entry, completed: !entry.completed, updatedAt: new Date() }
        : entry
    ));
  }, []);

  const filteredEntries = useMemo(() => {
    return entries.filter(entry => {
      const dateStr = entry.createdAt.toDateString();
      const selectedDateStr = selectedDate.toDateString();
      
      const matchesDate = activeView === 'daily' ? dateStr === selectedDateStr : true;
      const matchesSearch = entry.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           entry.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           entry.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
      const matchesCategory = filterCategory === 'all' || entry.category === filterCategory;
      
      return matchesDate && matchesSearch && matchesCategory;
    });
  }, [entries, selectedDate, activeView, searchTerm, filterCategory]);

  const dailyStats = useMemo(() => {
    const today = selectedDate.toDateString();
    const todayEntries = entries.filter(entry => entry.createdAt.toDateString() === today);
    
    const moods = todayEntries.filter(e => e.mood).map(e => e.mood!);
    const energies = todayEntries.filter(e => e.energy).map(e => e.energy!);
    const completedTasks = todayEntries.filter(e => e.category === 'task' && e.completed).length;
    const totalTasks = todayEntries.filter(e => e.category === 'task').length;

    return {
      totalEntries: todayEntries.length,
      avgMood: moods.length > 0 ? (moods.reduce((a, b) => a + b, 0) / moods.length) : 0,
      avgEnergy: energies.length > 0 ? (energies.reduce((a, b) => a + b, 0) / energies.length) : 0,
      taskCompletion: totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0,
      completedTasks,
      totalTasks
    };
  }, [entries, selectedDate]);

  const weeklyStats = useMemo(() => {
    const startOfWeek = new Date(selectedDate);
    startOfWeek.setDate(selectedDate.getDate() - selectedDate.getDay());
    
    const weekEntries = [];
    for (let i = 0; i < 7; i++) {
      const day = new Date(startOfWeek);
      day.setDate(startOfWeek.getDate() + i);
      const dayEntries = entries.filter(entry => 
        entry.createdAt.toDateString() === day.toDateString()
      );
      
      const moods = dayEntries.filter(e => e.mood).map(e => e.mood!);
      const energies = dayEntries.filter(e => e.energy).map(e => e.energy!);
      
      weekEntries.push({
        date: day,
        count: dayEntries.length,
        avgMood: moods.length > 0 ? moods.reduce((a, b) => a + b, 0) / moods.length : 0,
        avgEnergy: energies.length > 0 ? energies.reduce((a, b) => a + b, 0) / energies.length : 0
      });
    }
    
    return weekEntries;
  }, [entries, selectedDate]);

  return (
    <AppLayout>
      <div className="flex flex-col h-full bg-background">
        {/* Header */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="p-6 border-b border-border"
        >
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-3xl font-bold text-gradient">FlowJournal</h1>
              <p className="text-muted-foreground mt-1">Capture your thoughts and track your journey</p>
            </div>
            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button className="neumorphic-button">
                  <Plus className="w-4 h-4 mr-2" />
                  New Entry
                </Button>
              </DialogTrigger>
            </Dialog>
          </div>

          {/* Search and Filters */}
          <div className="flex flex-col sm:flex-row gap-4 items-center">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder="Search entries, tags, or content..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 neumorphic-button"
              />
            </div>
            <Select value={filterCategory} onValueChange={setFilterCategory}>
              <SelectTrigger className="w-40 neumorphic-button">
                <Filter className="w-4 h-4 mr-2" />
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                <SelectItem value="reflection">Reflection</SelectItem>
                <SelectItem value="goal">Goal</SelectItem>
                <SelectItem value="gratitude">Gratitude</SelectItem>
                <SelectItem value="idea">Idea</SelectItem>
                <SelectItem value="task">Task</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </motion.div>

        {/* Main Content */}
        <div className="flex-1 p-6">
          <Tabs value={activeView} onValueChange={(value) => setActiveView(value as any)}>
            <TabsList className="grid w-full grid-cols-3 mb-6 neumorphic-button">
              <TabsTrigger value="daily" className="flex items-center gap-2">
                <CalendarIcon className="w-4 h-4" />
                Daily
              </TabsTrigger>
              <TabsTrigger value="weekly" className="flex items-center gap-2">
                <BarChart3 className="w-4 h-4" />
                Weekly
              </TabsTrigger>
              <TabsTrigger value="monthly" className="flex items-center gap-2">
                <TrendingUp className="w-4 h-4" />
                Monthly
              </TabsTrigger>
            </TabsList>

            <TabsContent value="daily" className="space-y-6">
              {/* Daily Stats */}
              <motion.div 
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="grid grid-cols-2 lg:grid-cols-4 gap-4"
              >
                <Card className="neumorphic-card">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground">Entries</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-primary">{dailyStats.totalEntries}</div>
                  </CardContent>
                </Card>
                
                <Card className="neumorphic-card">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                      <Smile className="w-4 h-4" />
                      Mood
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-primary">
                      {dailyStats.avgMood > 0 ? dailyStats.avgMood.toFixed(1) : '--'}/10
                    </div>
                  </CardContent>
                </Card>

                <Card className="neumorphic-card">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                      <Battery className="w-4 h-4" />
                      Energy
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-primary">
                      {dailyStats.avgEnergy > 0 ? dailyStats.avgEnergy.toFixed(1) : '--'}/10
                    </div>
                  </CardContent>
                </Card>

                <Card className="neumorphic-card">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground">Tasks</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-primary">
                      {dailyStats.completedTasks}/{dailyStats.totalTasks}
                    </div>
                    {dailyStats.totalTasks > 0 && (
                      <Progress value={dailyStats.taskCompletion} className="mt-2" />
                    )}
                  </CardContent>
                </Card>
              </motion.div>

              {/* Date Selector */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setSelectedDate(new Date(selectedDate.getTime() - 24 * 60 * 60 * 1000))}
                    className="neumorphic-button"
                  >
                    <ArrowUp className="w-4 h-4 rotate-180" />
                  </Button>
                  <h2 className="text-xl font-semibold">
                    {selectedDate.toLocaleDateString('en-US', { 
                      weekday: 'long', 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    })}
                  </h2>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setSelectedDate(new Date(selectedDate.getTime() + 24 * 60 * 60 * 1000))}
                    className="neumorphic-button"
                  >
                    <ArrowDown className="w-4 h-4 rotate-180" />
                  </Button>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setSelectedDate(new Date())}
                  className="neumorphic-button"
                >
                  Today
                </Button>
              </div>

              {/* Entries Grid */}
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                <AnimatePresence>
                  {filteredEntries.map((entry, index) => {
                    const IconComponent = categoryIcons[entry.category];
                    
                    return (
                      <motion.div
                        key={entry.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ delay: index * 0.05 }}
                      >
                        <Card className="neumorphic-card group cursor-pointer">
                          <CardHeader className="pb-3">
                            <div className="flex items-start justify-between">
                              <div className="flex items-center gap-2">
                                <IconComponent className="w-4 h-4 text-primary" />
                                <Badge className={categoryColors[entry.category]}>
                                  {entry.category}
                                </Badge>
                                <div className={`w-2 h-2 rounded-full ${priorityColors[entry.priority]}`} />
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                className="opacity-0 group-hover:opacity-100 transition-opacity"
                                onClick={() => setEditingEntry(entry)}
                              >
                                <MoreVertical className="w-4 h-4" />
                              </Button>
                            </div>
                            <CardTitle className="text-base">{entry.title}</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <p className="text-sm text-muted-foreground mb-3 line-clamp-3">
                              {entry.content}
                            </p>
                            
                            {entry.tags.length > 0 && (
                              <div className="flex flex-wrap gap-1 mb-3">
                                {entry.tags.map((tag, idx) => (
                                  <Badge key={idx} variant="outline" className="text-xs">
                                    #{tag}
                                  </Badge>
                                ))}
                              </div>
                            )}

                            <div className="flex items-center justify-between text-xs text-muted-foreground">
                              <span>{entry.createdAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                              <div className="flex items-center gap-3">
                                {entry.mood && (
                                  <span className="flex items-center gap-1">
                                    <Smile className="w-3 h-3" />
                                    {entry.mood}
                                  </span>
                                )}
                                {entry.energy && (
                                  <span className="flex items-center gap-1">
                                    <Battery className="w-3 h-3" />
                                    {entry.energy}
                                  </span>
                                )}
                                {entry.category === 'task' && (
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      toggleTaskComplete(entry.id);
                                    }}
                                    className="p-0 h-auto"
                                  >
                                    <CheckSquare 
                                      className={`w-4 h-4 ${entry.completed ? 'text-green-500' : 'text-muted-foreground'}`}
                                    />
                                  </Button>
                                )}
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      </motion.div>
                    );
                  })}
                </AnimatePresence>
              </div>

              {filteredEntries.length === 0 && (
                <motion.div 
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-center py-12"
                >
                  <div className="neumorphic-card p-8 max-w-md mx-auto">
                    <MessageSquare className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                    <h3 className="text-lg font-medium mb-2">No entries yet</h3>
                    <p className="text-muted-foreground mb-4">
                      Start journaling to capture your thoughts and track your progress.
                    </p>
                    <Button onClick={() => setIsCreateDialogOpen(true)} className="neumorphic-button">
                      <Plus className="w-4 h-4 mr-2" />
                      Create First Entry
                    </Button>
                  </div>
                </motion.div>
              )}
            </TabsContent>

            <TabsContent value="weekly">
              <motion.div 
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="space-y-6"
              >
                <div className="grid grid-cols-7 gap-2">
                  {weeklyStats.map((day, index) => (
                    <Card key={index} className="neumorphic-card p-4">
                      <div className="text-center">
                        <div className="text-xs text-muted-foreground mb-2">
                          {day.date.toLocaleDateString('en-US', { weekday: 'short' })}
                        </div>
                        <div className="text-lg font-bold mb-2">{day.count}</div>
                        {day.avgMood > 0 && (
                          <div className="text-xs text-muted-foreground">
                            Mood: {day.avgMood.toFixed(1)}
                          </div>
                        )}
                        {day.avgEnergy > 0 && (
                          <div className="text-xs text-muted-foreground">
                            Energy: {day.avgEnergy.toFixed(1)}
                          </div>
                        )}
                      </div>
                    </Card>
                  ))}
                </div>
              </motion.div>
            </TabsContent>

            <TabsContent value="monthly">
              <motion.div 
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="space-y-6"
              >
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={(date) => date && setSelectedDate(date)}
                  className="neumorphic-card p-6 mx-auto w-fit"
                />
              </motion.div>
            </TabsContent>
          </Tabs>
        </div>

        {/* Create/Edit Dialog */}
        <Dialog open={isCreateDialogOpen || !!editingEntry} onOpenChange={(open) => {
          if (!open) {
            setIsCreateDialogOpen(false);
            setEditingEntry(null);
            setNewEntry({
              title: '',
              content: '',
              category: 'reflection',
              priority: 'medium',
              tags: [],
              mood: 5,
              energy: 5
            });
          }
        }}>
          <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto neumorphic-card">
            <DialogHeader>
              <DialogTitle>
                {editingEntry ? 'Edit Entry' : 'Create New Entry'}
              </DialogTitle>
            </DialogHeader>
            
            <div className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="title">Title</Label>
                <Input
                  id="title"
                  placeholder="Entry title..."
                  value={editingEntry ? editingEntry.title : newEntry.title}
                  onChange={(e) => editingEntry 
                    ? setEditingEntry({ ...editingEntry, title: e.target.value })
                    : setNewEntry({ ...newEntry, title: e.target.value })
                  }
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Category</Label>
                  <Select
                    value={editingEntry ? editingEntry.category : newEntry.category}
                    onValueChange={(value) => editingEntry
                      ? setEditingEntry({ ...editingEntry, category: value as JournalEntry['category'] })
                      : setNewEntry({ ...newEntry, category: value as JournalEntry['category'] })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="reflection">Reflection</SelectItem>
                      <SelectItem value="goal">Goal</SelectItem>
                      <SelectItem value="gratitude">Gratitude</SelectItem>
                      <SelectItem value="idea">Idea</SelectItem>
                      <SelectItem value="task">Task</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>Priority</Label>
                  <Select
                    value={editingEntry ? editingEntry.priority : newEntry.priority}
                    onValueChange={(value) => editingEntry
                      ? setEditingEntry({ ...editingEntry, priority: value as JournalEntry['priority'] })
                      : setNewEntry({ ...newEntry, priority: value as JournalEntry['priority'] })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="content">Content</Label>
                <Textarea
                  id="content"
                  placeholder="Write your thoughts..."
                  rows={6}
                  value={editingEntry ? editingEntry.content : newEntry.content}
                  onChange={(e) => editingEntry
                    ? setEditingEntry({ ...editingEntry, content: e.target.value })
                    : setNewEntry({ ...newEntry, content: e.target.value })
                  }
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="tags">Tags (comma-separated)</Label>
                <Input
                  id="tags"
                  placeholder="work, personal, growth..."
                  value={editingEntry ? editingEntry.tags.join(', ') : newEntry.tags?.join(', ')}
                  onChange={(e) => {
                    const tags = e.target.value.split(',').map(tag => tag.trim()).filter(Boolean);
                    editingEntry
                      ? setEditingEntry({ ...editingEntry, tags })
                      : setNewEntry({ ...newEntry, tags });
                  }}
                />
              </div>

              <div className="grid grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label>Mood (1-10)</Label>
                  <Slider
                    value={[editingEntry?.mood || newEntry.mood || 5]}
                    onValueChange={([value]) => editingEntry
                      ? setEditingEntry({ ...editingEntry, mood: value })
                      : setNewEntry({ ...newEntry, mood: value })
                    }
                    min={1}
                    max={10}
                    step={1}
                    className="w-full"
                  />
                  <div className="text-center text-sm text-muted-foreground">
                    {editingEntry?.mood || newEntry.mood || 5}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>Energy (1-10)</Label>
                  <Slider
                    value={[editingEntry?.energy || newEntry.energy || 5]}
                    onValueChange={([value]) => editingEntry
                      ? setEditingEntry({ ...editingEntry, energy: value })
                      : setNewEntry({ ...newEntry, energy: value })
                    }
                    min={1}
                    max={10}
                    step={1}
                    className="w-full"
                  />
                  <div className="text-center text-sm text-muted-foreground">
                    {editingEntry?.energy || newEntry.energy || 5}
                  </div>
                </div>
              </div>

              <div className="flex justify-between pt-4">
                {editingEntry && (
                  <Button
                    variant="destructive"
                    onClick={() => {
                      deleteEntry(editingEntry.id);
                      setEditingEntry(null);
                    }}
                  >
                    <Trash2 className="w-4 h-4 mr-2" />
                    Delete
                  </Button>
                )}
                <div className="flex gap-2 ml-auto">
                  <Button
                    variant="outline"
                    onClick={() => {
                      setIsCreateDialogOpen(false);
                      setEditingEntry(null);
                    }}
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={() => editingEntry ? updateEntry(editingEntry) : createEntry()}
                    disabled={editingEntry 
                      ? !editingEntry.title || !editingEntry.content
                      : !newEntry.title || !newEntry.content
                    }
                  >
                    {editingEntry ? 'Update' : 'Create'} Entry
                  </Button>
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </AppLayout>
  );
}